name: feature-ci

on:
  push:
    branches:
      - 'feature/**'

env:
  ENV_CHECKOUT_CACHE: 'npm'

jobs:
  packages:
    timeout-minutes: 1
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

  audit-packages:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Audit Packages
        run: npm audit --audit-level moderate
        env:
          CI: true

  lint:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ packages, audit-packages ]

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

  unit-test:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ lint ]

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run test

  e2e:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ lint ]

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run test:e2e

  coverage:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ lint ]

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run test:cov

  build-and-push-package:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ unit-test, e2e, coverage ]

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Package Version
        run: |
          export VERSION=$(node -p "require('./package.json').version")-alpha.${{github.run_id}}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Change Version Package.json
        uses: reedyuk/npm-version@1.1.1
        with:
          version: ${{ env.VERSION }}

      - name: Install Dependencies
        run: npm ci

      - name: Build Artifact
        run: npm run build
        env:
          NODE_ENV: 'production'

      - name: Publish Artifact to Github Packages
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
          registry-url: 'https://npm.pkg.github.com'
          scope: ${{ github.repository_owner }}
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [ build-and-push-package ]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Package Version
        run: |
          export VERSION=$(node -p "require('./package.json').version")-sha-{{github.sha}}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan-vulnerability-image:
    timeout-minutes: 10
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: [ build-and-push-image ]

    steps:
      - name: Checkout Code from Github
        uses: actions/checkout@v3

      - name: Scan vulnerability from Github Packages
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:sha-${{ github.sha }}
          format: 'sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Upload scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
